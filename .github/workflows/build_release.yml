name: Manual Build & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 1.2.3)' 
        required: true
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: 'true'

permissions:
  contents: write

env:
  FLUTTER_VERSION: stable
  PROJECT_PATH: arb_translator

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: windows
    steps:
      - uses: actions/checkout@v4
      - name: Validate version format
        run: |
          if ! echo "${{ github.event.inputs.version }}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$'; then
            echo "Invalid semver: ${{ github.event.inputs.version }}"; exit 1; fi
      - name: Set up Flutter (cached)
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          cache: true
      - name: Enable targets
        run: |
          if [ "${{ matrix.target }}" = "linux" ]; then flutter config --enable-linux-desktop; fi
          if [ "${{ matrix.target }}" = "windows" ]; then flutter config --enable-windows-desktop; fi
        shell: bash
      - name: Install Linux build deps
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev clang cmake ninja-build pkg-config liblzma-dev
      - name: Pub get
        working-directory: ${{ env.PROJECT_PATH }}
        run: flutter pub get
      - name: Generate code
        working-directory: ${{ env.PROJECT_PATH }}
        run: dart run build_runner build --delete-conflicting-outputs
      - name: Build
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          if [ "${{ matrix.target }}" = "linux" ]; then flutter build linux --release; fi
          if [ "${{ matrix.target }}" = "windows" ]; then flutter build windows --release; fi
      - name: Package artifact
        run: |
          if [ "${{ matrix.target }}" = "linux" ]; then
            tar -czf arb_translator-linux.tar.gz -C ${{ env.PROJECT_PATH }}/build/linux/x64/release/bundle .
          else
            powershell -Command "Compress-Archive -Path '${{ env.PROJECT_PATH }}\\build\\windows\\x64\\runner\\Release\\*' -DestinationPath arb_translator-windows.zip"
          fi
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: arb_translator-${{ matrix.target }}
          path: |
            arb_translator-linux.tar.gz
            arb_translator-windows.zip
          if-no-files-found: error

  release:
    needs: build
    if: ${{ github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create tag
        run: |
          git fetch --tags
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo 'Tag exists'; exit 0; fi
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: arb_translator v${{ github.event.inputs.version }}
          body: Manual release
          files: |
            artifacts/arb_translator-linux/arb_translator-linux.tar.gz
            artifacts/arb_translator-windows/arb_translator-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
